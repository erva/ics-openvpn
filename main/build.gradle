/*
 * Copyright (c) 2012-2016 Arne Schwabe
 * Distributed under the GNU GPL v2 with additional terms. For full terms see the file doc/LICENSE.txt
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'checkstyle'
checkstyle {
    showViolations true
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.google.com' }
    google()
}

dependencies {
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.61'
    implementation "androidx.core:core:1.1.0"

    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.mockito:mockito-android:2.27.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
    testImplementation 'org.robolectric:robolectric:4.3.1'
}

def openvpn3SwigFiles = new File(buildDir, "generated/source/ovpn3swig/ovpn3")

task ("generateOpenVPN3Swig" ,type:Exec) {
    def swigcmd = "swig"
    // Workaround for Mac OS X since it otherwise does not find swig and I cannot get
    // the Exec task to respect the PATH environment :(
    if (file("/usr/local/bin/swig").exists())
        swigcmd = "/usr/local/bin/swig"

    doFirst {
        mkdir openvpn3SwigFiles
    }
    commandLine swigcmd, "-outdir", openvpn3SwigFiles, "-outcurrentdir", "-c++", "-java", "-package", "net.openvpn.ovpn3",
        "-Isrc/main/cpp/openvpn3/client", "-Isrc/main/cpp/openvpn3/",
        "-o", "${openvpn3SwigFiles}/ovpncli_wrap.cxx", "-oh", "${openvpn3SwigFiles}/ovpncli_wrap.h",
        "src/main/cpp/openvpn3/javacli/ovpncli.i"
\
}

def swigTask = tasks.named("generateOpenVPN3Swig")
def preBuildTask = tasks.getByName("preBuild")
def assembleTask = tasks.getByName("assemble")

assembleTask.dependsOn(swigTask)
preBuildTask.dependsOn(swigTask)

android {
    def version = rootProject.extensions.ext.versions
    compileSdkVersion version.compileSdkVersion

    flavorDimensions "default"

    defaultConfig {
        minSdkVersion version.minSdkVersion
        targetSdkVersion version.targetSdkVersion
        versionName = version.coreVersionName
        versionCode = version.coreVersionCode
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
//                arguments '-DANDROID_TOOLCHAIN=clang',
//                    '-DANDROID_STL=c++_static'
                //abiFilters "arm64-v8a"
            }
        }
        buildConfigField("Boolean", "openvpn3", "true")
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    sourceSets {
        debug {
            assets.srcDirs = ['src/main/assets', 'build/ovpnassets']
//            java.srcDirs =["src/ovpn3/java/","src/main/java/","src/skeleton/java/","src/ui/java/", openvpn3SwigFiles]
            java.srcDirs =["src/main/java/", "src/skeleton/java/", openvpn3SwigFiles]
        }
    }

    lintOptions {
        enable 'BackButton', 'EasterEgg', 'StopShip', 'IconExpectedSize', 'GradleDynamicVersion', 'NewerVersionAvailable'
        warning 'ImpliedQuantity', 'MissingQuantity'
        disable 'MissingTranslation', 'UnsafeNativeCodeLocation'
    }

    buildTypes {
        debug {
            debuggable = true
        }
        release {
            minifyEnabled = false
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    splits {
        abi {
            setEnable(true)
            reset()
            include("x86", "x86_64", "armeabi-v7a", "arm64-v8a")
            setUniversalApk(true)

        }
    }
}

// ~/.gradle/gradle.properties
if (project.hasProperty('keystoreFile') &&
    project.hasProperty('keystorePassword') &&
    project.hasProperty('keystoreAliasPassword')) {
    android.signingConfigs.release.storeFile = file(keystoreFile)
    android.signingConfigs.release.storePassword = keystorePassword
    android.signingConfigs.release.keyPassword = keystoreAliasPassword
    android.signingConfigs.release.keyAlias = keystoreAlias
} else {
    android.buildTypes.release.signingConfig = null
}

// Ensure native build is run before assets, so assets are ready to be merged into the apk
android.libraryVariants.all { variant ->
    variant.mergeAssets.dependsOn(variant.externalNativeBuildTasks)
}

android.libraryVariants.all { variant ->
    variant.productFlavors.each {
//        if (it.dimension == 'implementation' &&  it.name != 'noovpn3')
            variant.getJavaCompiler().dependsOn(generateOpenVPN3Swig)

    }
} 